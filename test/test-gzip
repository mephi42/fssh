#!/usr/bin/perl
use strict;
use warnings;
use File::Spec::Functions;
use File::Temp qw(&tempdir);
use Getopt::Long;
use POSIX;
use Time::HiRes qw(&time);

use autodie qw(:all);

my $fssh = "local";
my $port = 5555;
my $count = 1;
my $rate;
my $kill_ssh = 0;
GetOptions("fssh=s" => \$fssh, "port=s" => \$port, "count=s" => \$count, "rate=s" => \$rate, "kill-ssh=s" => \$kill_ssh) or die;
my $size = shift or die;

if ($count > 1) {
	my @pids = ();
	for (my $i = 0; $i < $count; ++$i) {
		my $pid = fork();
		if ($pid == 0) {
			exec($0, "--fssh=${fssh}", ($fssh eq "local") ? "--port=" . ($port + $i) : (), $size);
		}
		print STDERR "Forked ${pid}\n";
		push @pids, $pid;
	}
	my @statuses = map { waitpid($_, 0); WIFEXITED($?) ? WEXITSTATUS($?) : 1 } @pids;
	exit((grep { $_ != 0} @statuses) ? 0 : 1);
}

my $dir = tempdir(CLEANUP => 1);
my $infile = catfile($dir, "infile");
my $outfile1 = catfile($dir, "outfile1");
my $outfile2 = catfile($dir, "outfile2");
my $endpoint = "tcp://0.0.0.0:${port}";

sub pstree {
	my $pstree = {};
	foreach my $line (`ps --no-headers -e -o pid,ppid,cmd`) {
		chomp($line);
		$line =~ s/^\s+//g;
		my @info = split /\s+/, $line, 3;
		$pstree->{$info[0]}->{ID} = $info[0];
		$pstree->{$info[0]}->{PARENT} = $info[1];
		$pstree->{$info[0]}->{COMMAND} = $info[2];
		push @{$pstree->{$info[1]}->{CHILDREN}}, $info[0];
	}
	return $pstree;
}

sub flat_subtree {
	my ($pstree, $pid) = @_;
	return ($pstree->{$pid}, (map { flat_subtree($pstree, $_) } @{$pstree->{$pid}->{CHILDREN}}));
}

sub find_ssh {
	my @ssh = grep { $_->{COMMAND} =~ /^ssh / } flat_subtree(pstree(), getpid());
	if (scalar @ssh == 0) { return undef; }
	if (scalar @ssh > 1) { die 'More than one ssh found'; }
	return $ssh[0]->{ID};
}

my $start_time = time();
my $gzip = "gzip";
if (defined $rate) { $gzip .= " | pv --quiet --rate-limit ${rate}"; }
if ($fssh eq "none") {
	system("bash", "-c", "head -c ${size} /dev/urandom | tee ${infile} | ${gzip} | tee >(cat >${outfile2}) >${outfile1}");
} elsif ($fssh eq "local") {
	my $daemon_pid = fork();
	if ($daemon_pid == 0) {
		exec("fssh-daemon", $endpoint, "bash", "-c", "${gzip} | tee >(cat >&2)");
	}

	system("head -c ${size} /dev/urandom | tee ${infile} | fssh-client ${endpoint} >${outfile1} 2>${outfile2}");
	waitpid($daemon_pid, 0);
	unless (WIFEXITED($?) && WEXITSTATUS($?) == 0) { die "fssh-daemon failed"; }
} elsif ($fssh eq "remote") {
	my $pid = fork();
	if ($pid == 0) {
		exec("bash", "-c", "head -c ${size} /dev/urandom | tee ${infile} | fssh localhost bash -c \"${gzip}\" >${outfile1} 2>${outfile2}");
	}
	if ($kill_ssh) {
		while (1) {
			if (waitpid($pid, WNOHANG) == $pid) { last; }
			sleep($kill_ssh);
			my $ssh_pid = find_ssh();
			if (defined($ssh_pid)) {
				kill(SIGKILL, $ssh_pid);
			}
		}
	} else {
		waitpid($pid, 0);
	}
	unless (WIFEXITED($?) && WEXITSTATUS($?) == 0) { die "fssh failed"; }
}
my $duration = time() - $start_time;

system("cat ${outfile1} | gunzip | diff ${infile} -");
if ($fssh ne "remote") {
	system("cat ${outfile2} | gunzip | diff ${infile} -");
}

print "${duration}\n";
